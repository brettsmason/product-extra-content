name: Build and Tag

env:
  NODE_VERSION: '22'

on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  release:
    # Only proceed if the PR was merged into main
    if: github.event.pull_request.merged == true
    name: Build, package, and release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: zip, dom, simplexml
          coverage: none

      - name: Install Composer dependencies (with dev)
        run: composer install --no-interaction --prefer-dist -o

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install Node dependencies (skip postinstall)
        run: npm ci --ignore-scripts

      - name: Build assets
        run: npm run build

      - name: Setup WP-CLI
        uses: godaddy-wordpress/setup-wp-cli@1

      - name: Translations
        run: npm run pot

      - name: Reinstall Composer dependencies (no-dev) for packaging
        run: composer install --no-interaction --prefer-dist --no-dev -o

      - name: Derive version from plugin header and check tag
        run: |
          VERSION=$(php -r 'preg_match("/^\\s*\\*\\s*Version:\\s*(.+)$/m", file_get_contents("product-extra-content.php"), $m); echo trim($m[1]);')
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          TAG="v$VERSION"
          echo "TAG=$TAG" >> "$GITHUB_ENV"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "TAG_EXISTS=true" >> "$GITHUB_ENV"
          else
            echo "TAG_EXISTS=false" >> "$GITHUB_ENV"
          fi

      - name: Package plugin with @wordpress/scripts plugin-zip
        if: env.TAG_EXISTS == 'false'
        run: |
          npm run plugin-zip
          mkdir -p dist
          mv ./*.zip dist/

      - name: Configure git user for tagging
        run: |
          git config --local user.name "${{ github.actor }}"
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Stage dist contents (only production files)
        if: env.TAG_EXISTS == 'false'
        run: |
          STAGING="$(mktemp -d)"
          cp -a product-extra-content.php "$STAGING"/ || true
          for p in includes languages build vendor assets; do
            if [ -e "$p" ]; then
              cp -a "$p" "$STAGING"/
            fi
          done
          if [ -f README.md ]; then cp -a README.md "$STAGING"/; fi
          if [ -f LICENSE ] || [ -f LICENSE.md ]; then cp -a LICENSE* "$STAGING"/; fi
          echo "STAGING=$STAGING" >> "$GITHUB_ENV"

      - name: Create clean dist branch and commit staged files
        if: env.TAG_EXISTS == 'false'
        run: |
          git fetch origin
          # Create or reset orphan dist branch
          if git show-ref --verify --quiet refs/heads/dist; then
            git checkout --orphan dist
          else
            git checkout --orphan dist
          fi
          # Remove all files from working tree
          git rm -rf . || true
          git clean -fdx || true
          # Copy staged production files into repo root
          rsync -a "$STAGING"/ .
          # Add files (force-add ignored build/vendor)
          git add -A
          git add -f build || true
          git add -f vendor || true
          git commit -m "dist: build for ${TAG}"
          git push -f origin dist

      - name: Tag release at dist commit and push tag
        if: env.TAG_EXISTS == 'false'
        run: |
          git tag -a "${TAG}" -m "Release ${TAG}" || git tag -f "${TAG}"
          git push -f origin "refs/tags/${TAG}"

      - name: Create GitHub Release
        if: env.TAG_EXISTS == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: Version ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            dist/*.zip
